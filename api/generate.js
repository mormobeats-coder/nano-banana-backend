// Vercel Serverless Function –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
// –î–µ–ø–ª–æ–∏—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö Vercel –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π

export default async function handler(req, res) {
  // CORS –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —Å –ª—é–±–æ–≥–æ —Å–∞–π—Ç–∞
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,PATCH,DELETE,POST,PUT');
  res.setHeader('Access-Control-Allow-Headers', 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version, x-goog-api-key');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { model, action, body } = req.body;
    const apiKey = req.headers['x-goog-api-key'] || process.env.GEMINI_API_KEY;

    if (!apiKey) {
      return res.status(401).json({ 
        error: 'API key required',
        hint: '–î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ x-goog-api-key –∏–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Vercel'
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è Gemini API
    let geminiUrl;
    if (action === 'generateImages') {
      geminiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateImages`;
    } else if (action === 'generateContent') {
      geminiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent`;
    } else {
      return res.status(400).json({ error: 'Invalid action' });
    }

    console.log('üé® –ó–∞–ø—Ä–æ—Å –∫ Gemini:', geminiUrl);

    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API
    const response = await fetch(geminiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-goog-api-key': apiKey,
      },
      body: JSON.stringify(body),
    });

    const data = await response.json();

    if (!response.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç Gemini:', response.status, data);
      return res.status(response.status).json(data);
    }

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è!');
    return res.status(200).json(data);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    return res.status(500).json({ 
      error: 'Internal server error',
      message: error.message 
    });
  }
}

